<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Jacky Tang&#39;s Blog</title>
    <link>http://localhost:1313/categories/tech/</link>
    <description>Recent content in Tech on Jacky Tang&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Get the Client’s “Real” IP Address with Envoy Gateway ?</title>
      <link>http://localhost:1313/post/2024-05-17-client-ip-en/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024-05-17-client-ip-en/</guid>
      <description>Just as a river flows from its source through various bends before reaching the sea, a typical HTTP request travels from a client across multiple network hops until it reaches its destination server.&#xA;During this journey, the request’s original IP address is lost as it moves through multiple network infrastructures such as proxy servers and load balancers. This happens because some of these hops terminate the TCP connection and create a new TCP connection with the next hop.</description>
    </item>
    <item>
      <title>如何通过 Envoy Gateway 得到客户端的真实 IP 地址？</title>
      <link>http://localhost:1313/post/2024-05-17-client-ip/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024-05-17-client-ip/</guid>
      <description>前言 河水出昆仑，东流经玉门，环绝壁，历五山，南至积石，东流入海。其流也，或曲或直，时急时缓，遇山则环，逢谷则奔。渐行渐远，百折千回，至于中原</description>
    </item>
    <item>
      <title>使用服务网格和 Envoy Gateway 构建客户端的可用性和弹性</title>
      <link>http://localhost:1313/post/2024-04-07-client-side-availability-and-resiliency/</link>
      <pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024-04-07-client-side-availability-and-resiliency/</guid>
      <description>如何从客户端角度思考服务的可用性和弹性 这是一系列关于 Envoy Gateway 价值的文章之一，该网关已经达到了 1.0 版本的发布里程碑，可以投入生产使用。 在讨论可用性和</description>
    </item>
    <item>
      <title>我提交的 PR 为何还没能合入？</title>
      <link>http://localhost:1313/post/2024-03-20-how-to-create-a-pull-request/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024-03-20-how-to-create-a-pull-request/</guid>
      <description>我提交的 PR 为何还没能合入？如何才能更快地合入我的 PR ？ 相信这是很多参与开源项目的开发者常常遇到的疑问。 对于开发者来说，提交 PR（Pull Req</description>
    </item>
    <item>
      <title>Envoy Gateway 发布通用可用版本 1.0.0 ！</title>
      <link>http://localhost:1313/post/2024-03-05-envoy-gateway-ga/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024-03-05-envoy-gateway-ga/</guid>
      <description>作者 Envoy Gateway 社区：Alice Wasko (Ambassador Labs), Arko Dasgupta (Tetrate), Congqi Zhu (CECloud), Guy Daich (SAP), Huabing Zhao (Tetrate), Jianpeng He (Tetrate), Xunzhuo Liu (Tencent) 今天，我们非常高兴地宣布 Envoy Gateway (EG) 1.0 版本现已面向 Kubernetes 发布。这是一个成熟的版本，已</description>
    </item>
    <item>
      <title>Envoy Gateway：十分钟搞定单点登录（SSO）！</title>
      <link>http://localhost:1313/post/2023-12-07-envoy-gateway-security-policy-oidc/</link>
      <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-12-07-envoy-gateway-security-policy-oidc/</guid>
      <description>单点登录（SSO）简化了用户体验，使用户能够在访问多个应用时只需一次登录。这提高了用户满意度，减少了密码遗忘的风险，同时增强了安全性。但是，</description>
    </item>
    <item>
      <title>Envoy Gateway 安全策略介绍: HTTP Basic Authentication</title>
      <link>http://localhost:1313/post/2023-11-29-envoy-gateway-security-policy-basic-auth/</link>
      <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-29-envoy-gateway-security-policy-basic-auth/</guid>
      <description>什么是 Envoy Gateway 安全策略？ Envoy Gateway 中的安全策略 (SecurityPolicy) 是 Envoy Gateway 对 Kubernetes Gateway API 的一个扩展资源。SecurityPolicy 采用了 Gateway API 的 Policy Attachment 机制来对 Gateway API 进行扩展，为 Envoy Gateway</description>
    </item>
    <item>
      <title>KubeCon NA - Introduce MetaProtocol Proxy: A Layer-7 Proxy Framework Powered by Envoy</title>
      <link>http://localhost:1313/post/2023-11-16-kubecon-na-metaprotocol/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-16-kubecon-na-metaprotocol/</guid>
      <description>Even with Envoy&amp;rsquo;s powerful filter extension mechanism, writing a proxy for none-http protocols from scratch can be challenging. MetaProtocol Proxy solves this by abstracting layer-7 proxy with a concept called metadata and providing a “batteries included” framework that includes common traffic management capabilities: load balancing, circuit breaker, routing, rate limiting, fault injection, observability,</description>
    </item>
    <item>
      <title>KubeCon 芝加哥现场报道 - Envoy Gateway Maintainer Alice Wasko</title>
      <link>http://localhost:1313/post/2023-11-16-kubecon-na-lin-alice-wasko/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-16-kubecon-na-lin-alice-wasko/</guid>
      <description>Videos Bilibili YouTube 采访内容(待整理): Huabing: I will introduce this interview first in Chinese, because the audience are from China. Envoy Gateway 社区的朋友大家好，我们今天有幸邀请到了 Envoy Gateway 的维护者，来自 Emissary 的 Alice。 Alice 从 Envoy Gateway</description>
    </item>
    <item>
      <title>KubeCon 芝加哥现场报道 - Istio 创始人 Varun Talwar 解密 Istio 开源背后的故事</title>
      <link>http://localhost:1313/post/2023-11-16-kubecon-na-varun-talwar-interview/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-16-kubecon-na-varun-talwar-interview/</guid>
      <description>Videos Bilibili YouTube 采访内容(译文): Huabing：你好， Varun，感谢你接受我们的采访。Varun Talwar 是著名开源项目 Istio 的创始人之一，也是硅谷科技初创公</description>
    </item>
    <item>
      <title>KubeCon 芝加哥现场报道 - Istio 技术指导委员会成员 Lin Sun 分享 Istio 项目历史与未来展望</title>
      <link>http://localhost:1313/post/2023-11-16-kubecon-na-lin-sun-interview/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-16-kubecon-na-lin-sun-interview/</guid>
      <description>Videos Bilibili YouTube 采访内容(待整理): Um OK. Let&amp;rsquo;s just switch the image. OK. Um I think you already give us a little bit of background and interaction on yourself. So I, I think it&amp;rsquo;s fair to say you are one of the founder, etcetera. So uh maybe tell us um what give you involved in Mr Smith first. Um What inspired you</description>
    </item>
    <item>
      <title>KubeCon 芝加哥现场报道 - Istio 社区核心维护者 John Howard 分享他高效的秘诀</title>
      <link>http://localhost:1313/post/2023-11-16-kubecon-na-john-howard-interview/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-16-kubecon-na-john-howard-interview/</guid>
      <description>Videos Bilibili YouTube 采访内容(待整理): Huabing: OK, let&amp;rsquo;s welcome our superstar from Istio community. John Howard, Is my pronunciation correct? John: Yeah, John Howard, I&amp;rsquo;m John. I&amp;rsquo;m a software engineer at Google. I&amp;rsquo;ve been involved with the Istio community for about the last five years now, kind of all sorts of different roles. I started out mostly working in the networking area</description>
    </item>
    <item>
      <title>KubeCon 上海分享: Envoy Gateway - The API Gateway in the Cloud Native Era</title>
      <link>http://localhost:1313/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-11-01-kubecon-shanghai-2023-envoy-gateway-the-api-gateway-in-the-cloud-native-era/</guid>
      <description>EnvoyProx 是云原生时代的代理之一，也是CNCF下的毕业项目之一。Envoy Gateway 是由 EnvoyProxy 的创始人 Matt Klein 发起的 API 网关项目。由我所在公司（Tetrate.io）</description>
    </item>
    <item>
      <title>Aeraki Mesh 发布 1.4.0 版本（代号：Heshun）</title>
      <link>http://localhost:1313/post/2023-06-24-aeraki-1.4.0/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-06-24-aeraki-1.4.0/</guid>
      <description>Aeraki Mesh 于 2023 年 8 月 13 日发布 1.4.0 版本（版本代号：Heshun），本次发布的最主要的特性是支持了 Istio 1.18.x 系列版本。 备注：版本代号来自于这个夏天旅行的一个云</description>
    </item>
    <item>
      <title>Aeraki Mesh 发布 1.3.0 版本（代号：Dragonboat）</title>
      <link>http://localhost:1313/post/2023-06-24-aeraki-1.3.0/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-06-24-aeraki-1.3.0/</guid>
      <description>Aeraki Mesh 于 2023 年 6 月 24 日发布 1.3.0 版本（版本代号：Dragonboat），该版本包含了对 Istio 1.16.x 系列版本的支持，以及支持多路复用，gateway 支持 MetaProtoco 等一</description>
    </item>
    <item>
      <title>Database Mesh: Simplify Redis Cluster with Istio and Aeraki</title>
      <link>http://localhost:1313/post/2023-05-08-manage-redis-with-aeraki-mes-eng/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-05-08-manage-redis-with-aeraki-mes-eng/</guid>
      <description>Redis is a high-performing key-value database known for its versatility in supporting a diverse range of data structures and operations, including strings, hashes, lists, sets, and sorted sets. Its robust capabilities make it an ideal choice for caching, session storage, message brokers, and other similar applications. Istio is one of the most popular service mesh platforms that provides a unified way to connect, secure, and manage microservices. Aeraki Mesh is</description>
    </item>
    <item>
      <title>Database Mesh: 使用 Istio 和 Aeraki 对 Redis 进行流量管理</title>
      <link>http://localhost:1313/post/2023-05-08-manage-redis-with-aeraki-mesh/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-05-08-manage-redis-with-aeraki-mesh/</guid>
      <description>Redis 是一种高性能的键值数据库，支持丰富的数据结构和操作，包括字符串、哈希、列表、集合、有序集合等。由于其强大的能力，Redis 被广泛应用于缓存</description>
    </item>
    <item>
      <title>为什么 Envoy Gateway 是云原生时代的七层网关？</title>
      <link>http://localhost:1313/post/2023-04-11-why-eg-is-the-gateway-in-cloud-native-era/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-04-11-why-eg-is-the-gateway-in-cloud-native-era/</guid>
      <description>初识 Envoy 大家好，我叫赵化冰，是 CNCF 云原生基金会大使，也是一个软件行业老兵和云原生从业者。我还记得，当我 2017 年在 Linux 基金会下的一个开源项目中从事微服务</description>
    </item>
    <item>
      <title>Kubernetes Controller 机制详解（二）</title>
      <link>http://localhost:1313/post/2023-04-04-how-to-create-a-k8s-controller-2/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-04-04-how-to-create-a-k8s-controller-2/</guid>
      <description>在上一篇文章 Kubernetes Controller 机制详解（一）中，我们学习了 Kubernetes API List/Watch 机制，以及如何采用 Kubernetes client-go 中的 Informer 机制来创建 Controller。该方法需要用户了解 Kubernetes client-go 的实现原</description>
    </item>
    <item>
      <title>Kubernetes Controller 机制详解（一）</title>
      <link>http://localhost:1313/post/2023-03-09-how-to-create-a-k8s-controller/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-03-09-how-to-create-a-k8s-controller/</guid>
      <description>Kubernetes(简称K8s) 是一套容器编排和管理系统，可以帮助我们部署、扩展和管理容器化应用程序。在 K8s 中，Controller 是一个重</description>
    </item>
    <item>
      <title>Aeraki Mesh Community Meeting - February 23rd, 2023</title>
      <link>http://localhost:1313/post/2023-02-24-aeraki-mesh-community-meeting/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-02-24-aeraki-mesh-community-meeting/</guid>
      <description>During this community meeting, we introduced Aeraki Mesh’s newly released Access Log and Service Metrics features. We also invited experts from Boss Zhipin and Shopline to share hands-on examples of Dubbo based on Aeraki Mesh. Furthermore, we introduced the new features of multiplexing and Gateway support for the MetaProtocol application protocol, which are being contributed by the Tencent Games project and Boss Zhipin. The Access</description>
    </item>
    <item>
      <title>Aeraki Mesh 社区例会 - 2023-02-23</title>
      <link>http://localhost:1313/post/2023-02-24-aeraki-mesh-community-meeting-en/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-02-24-aeraki-mesh-community-meeting-en/</guid>
      <description>本次社区会议介绍了 Aeraki Mesh 最新发布的 Access Log，Sevice Metrics 功能，并邀请了来自 Boss 直聘，Shopline 的专家分享基于 Aeraki Mesh 的 Dubbo 实操案例。此外，还介</description>
    </item>
    <item>
      <title>深入理解 Istio Metrics</title>
      <link>http://localhost:1313/post/2023-02-14-istio-metrics-deep-dive/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-02-14-istio-metrics-deep-dive/</guid>
      <description>Istio 为 Service Mesh 中的微服务提供了非常丰富的统计指标（Metrics），这些指标可以让运维人员随时监控应用程序中服务的健康状况，在系统出现线上故障之前</description>
    </item>
    <item>
      <title>Aeraki Mesh 提供服务级别的 Metrics</title>
      <link>http://localhost:1313/post/2023-02-06-aeraki-metrics/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023-02-06-aeraki-metrics/</guid>
      <description>在刚刚发布的最新版本 Aeraki Mesh 1.2.2 中 (对应 meta-protocol-proxy:1.2.3) ，Aeraki Mesh 提供了和 Istio 一致的服务级别指标，包括 istio_requests_total，istio_</description>
    </item>
    <item>
      <title>5分钟内将 Dubbo 服务接入 Istio 服务网格</title>
      <link>http://localhost:1313/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</link>
      <pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-11-18-dubbo-aeraki-mesh-in-5-minutes/</guid>
      <description>幻灯片 Aeraki Mesh 官网 Dubbo 接入教程 私有协议接入教程 Github</description>
    </item>
    <item>
      <title>Istio Ambient 模式流量管理实现机制详解（三）</title>
      <link>http://localhost:1313/post/2022-10-17-ambient-deep-dive-3/</link>
      <pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-10-17-ambient-deep-dive-3/</guid>
      <description>本文将继续介绍 ambient 模式下四层流量处理的实现机制。本文将以 bookinfo 应用中 productpage 访问 reviews 的请求路径为例来分析一个请求从 client 端发出到 server 端处理的四层流量处理流程。 reviews</description>
    </item>
    <item>
      <title>Istio Ambient 模式流量管理实现机制详解（二）</title>
      <link>http://localhost:1313/post/2022-09-11-ambient-deep-dive-2/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-11-ambient-deep-dive-2/</guid>
      <description>ambient 模式中，应用 pod 通过 ztunnel 之间的安全通道进行通信。要实现这一点，Istio 需要劫持应用 pod 的 outbound 和 inbound 流量，并转发到 ztunnel 进行处理。这是如何实现的呢？ Istio 采</description>
    </item>
    <item>
      <title>Istio Ambient 模式流量管理实现机制详解（一）</title>
      <link>http://localhost:1313/post/2022-09-11-ambient-deep-dive-1/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-11-ambient-deep-dive-1/</guid>
      <description>Istio ambient 模式采用了被称为 HBONE 的方式来连接 ztunnel 和 waypoint proxy。HBONE 是 HTTP-Based Overlay Network Environment 的缩写。虽然该名称是第一次看到，其实 HBONE 并不是 Istio 创建出来的一个新协议，</description>
    </item>
    <item>
      <title>Service Mesh Summit 2022 Dubbo Demo</title>
      <link>http://localhost:1313/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-26-servicemesh-summit2022-dubbo-aeraki-mesh/</guid>
      <description>Aeraki Mesh 官网 Dubbo 接入教程 私有协议接入教程 Github</description>
    </item>
    <item>
      <title>脑动极光 Aeraki Mesh Dubbo 架构微服务治理实践应用</title>
      <link>http://localhost:1313/post/2022-09-27-aeraki-mesh-ngjg-use-case/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-27-aeraki-mesh-ngjg-use-case/</guid>
      <description>脑动极光 在 Aeraki Mesh 社区会议上分享的 Dubbo 微服务治理实践。</description>
    </item>
    <item>
      <title>Try out Istio Ambient mode</title>
      <link>http://localhost:1313/post/2022-09-10-try-istio-ambient-english/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-10-try-istio-ambient-english/</guid>
      <description>Ambient is a new data-plane model that Istio has just announced support for. In this post, we will try to install Istio’s ambient model and use the bookinfo demo to experience the L4 and L7 capabilities offered by ambient. Note: L4 refers to the four layers of the OSI standard network model, i.e., TCP layer processing. L7 refers to layer seven of the OSI</description>
    </item>
    <item>
      <title>初探 Istio Ambient 模式</title>
      <link>http://localhost:1313/post/2022-09-10-try-istio-ambient/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-10-try-istio-ambient/</guid>
      <description>Ambient 是 Istio 刚刚宣布支持的一种新的数据面模式，在本篇文章中，我们将尝试安装 Istio 的 ambient 模式，并采用 bookinfo demo 来体验 ambient 提供的 L4 和 L7 能力。 备注： L4 指 OSI 标准网络模型</description>
    </item>
    <item>
      <title>译文：Istio Ambient 模式安全架构深度解析</title>
      <link>http://localhost:1313/post/2022-09-09-ambient-mesh-security-deep-dive/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-09-ambient-mesh-security-deep-dive/</guid>
      <description>深入分析刚刚公布的 Istio ambient mesh（Istio 的一个无 sidecar 数据平面）对于服务网格的安全来说意味着什么。 我们最近发布了 Istio ambient mesh，它是 Istio 的一个无 sidecar</description>
    </item>
    <item>
      <title>译文：重磅消息 - Istio 引入 Ambient Mesh 模式</title>
      <link>http://localhost:1313/post/2022-09-08-introducing-ambient-mesh/</link>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-08-introducing-ambient-mesh/</guid>
      <description>译者按：Istio 于2022年9月7日宣布了一种全新的数据平面模式 “ambient mesh”（ambient 意思是“环境的”，这里指 ambient mesh 使用</description>
    </item>
    <item>
      <title>使用 Aeraki Mesh 实现零代码侵入的 Dubbo 服务调用跟踪</title>
      <link>http://localhost:1313/post/2022-09-06-aeraki-mesh-tracing/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-09-06-aeraki-mesh-tracing/</guid>
      <description>安装示例程序 如果你还没有安装示例程序，请参照 快速开始 安装 Aeraki，Istio 及示例程序。 执行完成后，在 meta-dubbo 这个 NS 中安装了基于 MetaProtocol 实现的 Dubbo 协议</description>
    </item>
    <item>
      <title>MetaProtocol Proxy 代码解读：Connection Manager</title>
      <link>http://localhost:1313/post/2022-06-30-metaprotocol-proxy-connection-manager/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-06-30-metaprotocol-proxy-connection-manager/</guid>
      <description>ConnectionManager 是 MeataProtocol Proxy 的入口类。想要了解 MetaProtocol Proxy 的实现原理，可以从该类着手。 Envoy Network Filter 介绍 MetaProtocol Proxy 框架部分实现为 Envoy 中的一个 Network Filter。Enovy 通过 Listener 接收 Downstream 的连接</description>
    </item>
    <item>
      <title>Aeraki Mesh 正式成为 CNCF 沙箱项目</title>
      <link>http://localhost:1313/post/2022-06-17-aeraki-mesh-cncf-sandbox/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-06-17-aeraki-mesh-cncf-sandbox/</guid>
      <description>6月15日，我创建的 Aeraki Mesh 项目通过了全球顶级开源基金会云原生计算基金会（CNCF）技术监督委员会评定，正式成为CNCF 沙箱项目！这意味着 Aeraki Mesh 得</description>
    </item>
    <item>
      <title>Istiocon 2022 分享：Tencent Music’s service mesh practice with Istio and Aeraki(Istio &#43; Aeraki 在腾讯音乐的服务网格落地)</title>
      <link>http://localhost:1313/post/2022-04-26-aeraki-tencent-music-istiocon2022/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-04-26-aeraki-tencent-music-istiocon2022/</guid>
      <description>IstioCon 介绍 IstioCon 是 Istio 社区一年一度举行的全球线上峰会，此次峰会包含主题演讲、技术演讲、闪电演讲、研讨会和路线图会议等多种形态，聚焦社区新特性、生产落地</description>
    </item>
    <item>
      <title>腾讯云原生：Areaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践</title>
      <link>http://localhost:1313/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-03-30-aeraki-mesh-winter-olympics-practice/</guid>
      <description>主题简介 服务网格已经成为微服务的基础设施，但目前主流的服务网格产品只能处理 HTTP 协议，不支持其他七层协议，是服务网格落地的主要困难之一。本次直播</description>
    </item>
    <item>
      <title>Aeraki Mesh 加入 CNCF 云原生全景图</title>
      <link>http://localhost:1313/post/2022-03-02-aeraki-cncf-landscape/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-03-02-aeraki-cncf-landscape/</guid>
      <description>近日，Aeraki Mesh 正式进入 CNCF 云原生全景图，位于 Service Mesh 类别下。CNCF Landscape 在云原生实践过程中的每个环节帮助用户了解有哪些具体的软件和产品选择，A</description>
    </item>
    <item>
      <title>How to Pass the Certified Kubernetes Administrator (CKA) Exam Without Any Stress?</title>
      <link>http://localhost:1313/post/2022-02-08-how-to-prepare-cka-en/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-02-08-how-to-prepare-cka-en/</guid>
      <description>The CKA exam is not that hard. You can pass the CKA exam in less than 3 months without any stress if you follow the steps in this post to prepare. You have my word. I’ve tried myself and just successfully get my CKA certificate! How much time do I need to prepare for the CKA exam? It depends, an experienced DevOps engineer could spend much less</description>
    </item>
    <item>
      <title>如何成功通过 CKA 考试？</title>
      <link>http://localhost:1313/post/2022-02-08-how-to-prepare-cka/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-02-08-how-to-prepare-cka/</guid>
      <description>了解 CKA 考察的内容 在开始准备考试前一定要阅读CNCF 官方考试大纲，了解 CKA 考察考生的主要内容，以在备考时做到知己知彼，有的放矢，根据该考试大纲进</description>
    </item>
    <item>
      <title>Aeraki 教程系列：如何开发一个自定义协议？</title>
      <link>http://localhost:1313/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-01-23-aeraki-how-to-implement-a-custom-protocol/</guid>
      <description>MetaProtocol Proxy 提供了一个良好的协议扩展机制，使得我们可以基于 MetaProtocol Proxy 快速实现一个自定义协议的七层代理。 由于 MetaProtocol Proxy 已经实现了一个七层协议代理所需的大部分功能，</description>
    </item>
    <item>
      <title>Aeraki 教程系列：如何设置全局限流规则？</title>
      <link>http://localhost:1313/post/2022-01-13-aeraki-global-ratelimit/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-01-13-aeraki-global-ratelimit/</guid>
      <description>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理</description>
    </item>
    <item>
      <title>Aeraki 教程系列：如何设置本地限流规则？</title>
      <link>http://localhost:1313/post/2022-01-12-aeraki-local-ratelimit/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-01-12-aeraki-local-ratelimit/</guid>
      <description>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理</description>
    </item>
    <item>
      <title>Aeraki 教程系列：如何设置路由规则？</title>
      <link>http://localhost:1313/post/2022-01-11-aeraki-routing/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2022-01-11-aeraki-routing/</guid>
      <description>Aeraki 可以帮助你在服务网格中管理任何七层协议。目前 Aeraki 已经支持了 Dubbo、Thrit、Redis 等开源协议。你还可以使用 Aeraki 的 MetaProtocol 协议扩展框架来管理</description>
    </item>
    <item>
      <title>译文：服务网格将使用 eBPF ？是的，但 Envoy 代理将继续存在</title>
      <link>http://localhost:1313/post/2021-12-19-ebpf-for-service-mesh/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2021-12-19-ebpf-for-service-mesh/</guid>
      <description>译者按：这篇博客非常清晰地阐述了目前很热的 eBPF 和 Service Mesh 的关系，并分别介绍 Envoy 在几种不同的数据平面架构模型中的位置，以及这几种架构模型各自的优势和权</description>
    </item>
    <item>
      <title>Envoy 源码流程图</title>
      <link>http://localhost:1313/post/2021-08-11-envoy-code/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2021-08-11-envoy-code/</guid>
      <description>最近在实现 MetaProtocol 时阅读了 Envoy 相关的一些源码。这里将一些重要流程的时序图记录下来，以备后续查看。 TCP Proxy TCP Proxy 时序图 Dubbo Proxy Dubbo Proxy 时序图 RDS RDS（路由发现服务）</description>
    </item>
    <item>
      <title>Istio Meetup China：全栈服务网格 - Aeraki 助你在 Istio 服务网格中管理任何七层流量</title>
      <link>http://localhost:1313/post/2021-07-10-full-stack-service-mesh/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2021-07-10-full-stack-service-mesh/</guid>
      <description>主题简介 流量管理是 Istio 服务网格的核心能力，然而 Istio 缺省只提供了 HTTP 和 gRPC 两种协议的七层管理能力。对于微服务中常用的其他协议，包括 RPC、Messag</description>
    </item>
    <item>
      <title>Istio 知识图谱</title>
      <link>http://localhost:1313/post/2020-04-02-istio-mindmap/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-04-02-istio-mindmap/</guid>
      <description>Mind Map Istio 流量管理 Istio流量管理实现机制深度解析 Istio 流量管理原理与协议扩展 可见性 实现方法级调用跟踪 实现 Kafka 消息调用跟踪 协议扩展 如何在 Isito 中支持 Du</description>
    </item>
    <item>
      <title>腾讯云容器网络介绍</title>
      <link>http://localhost:1313/post/2021-03-24-tke-network-mode/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2021-03-24-tke-network-mode/</guid>
      <description>K8s 对于集群 Pod 的网络模型只有下面两点简单的要求： 节点上的 Pod 可以不通过 NAT 和其他任何节点上的 Pod 通信 节点上的代理（比如：系统守护进程、kubelet</description>
    </item>
    <item>
      <title>IstioCon 2021: How to Manage Any Layer-7 Traffic in an Istio Service Mesh?</title>
      <link>http://localhost:1313/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2021-03-02-manage-any-layer-7-traffic-in-istio/</guid>
      <description>备注：本文根据腾讯云赵化冰和知乎唐阳在 IstioCon 2021 中的演讲 “How to Manage Any Layer-7 Traffic in an Istio Service Mesh?” 整理而成。 大家好，今天我们想和大家分享的主题是如何扩</description>
    </item>
    <item>
      <title>CNBPS 2020：Istio 流量管理原理与协议扩展</title>
      <link>http://localhost:1313/post/2020-12-07-cnbps2020-istio-traffic-management/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-12-07-cnbps2020-istio-traffic-management/</guid>
      <description>通过本次的分享，听众可以理解Istio流量管理背后的实现原理，包括控制面流量管理模型和数据面流量转发机制。本次分享还将介绍如何对Istio进</description>
    </item>
    <item>
      <title>CNBPS 2020：云原生应用架构专场介绍</title>
      <link>http://localhost:1313/post/2020-11-12-cnbps2020/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-11-12-cnbps2020/</guid>
      <description>11月19-21日，CNBPS 2020重磅回归！ 作为一年一度的云原生科技盛会，众多云原生届的“顶流”将在这里聚集，展现云原生世界的科技想象力</description>
    </item>
    <item>
      <title>在 Istio 中实现 Redis 集群的数据分片、读写分离和流量镜像</title>
      <link>http://localhost:1313/post/2020-10-14-redis-cluster-with-istio/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-10-14-redis-cluster-with-istio/</guid>
      <description>Redis 是一个高性能的 key-value 存储系统，被广泛用于微服务架构中。如果我们想要使用 Redis 集群模式提供的高级特性，则需要对客户端代码进行改动，这带来了应用升级和</description>
    </item>
    <item>
      <title>Istio 运维实战系列（3）：让人头大的『无头服务』-下</title>
      <link>http://localhost:1313/post/2020-09-19-headless-mtls/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-09-19-headless-mtls/</guid>
      <description>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方</description>
    </item>
    <item>
      <title>Istio 运维实战系列（2）：让人头大的『无头服务』-上</title>
      <link>http://localhost:1313/post/2020-09-11-headless-mtls/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-09-11-headless-mtls/</guid>
      <description>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方</description>
    </item>
    <item>
      <title>Istio 运维实战系列（1）：应用容器对 Envoy Sidecar 的启动依赖问题</title>
      <link>http://localhost:1313/post/2020-09-05-istio-sidecar-dependency/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-09-05-istio-sidecar-dependency/</guid>
      <description>本系列文章将介绍用户从 Spring Cloud，Dubbo 等传统微服务框架迁移到 Istio 服务网格时的一些经验，以及在使用 Istio 过程中可能遇到的一些常见问题的解决方</description>
    </item>
    <item>
      <title>Google Cloud 服务网格：Traffic Director 与 Anthos Service Mesh 的左右互搏</title>
      <link>http://localhost:1313/post/2020-08-13-gcloud-service-mesh/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-08-13-gcloud-service-mesh/</guid>
      <description>作为开源 Service Mesh 明星项目 Istio 背后的主要厂商，Google 也在其公有云上推出了 Service Mesh 管理服务。让人迷惑的是 Google Cloud 上有两个 Service Mesh 产品：Traffic Director 与 Anthos Service</description>
    </item>
    <item>
      <title>How to Integrate Your Service Registry with Istio?</title>
      <link>http://localhost:1313/post/2020-06-12-third-party-registry-english/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-06-12-third-party-registry-english/</guid>
      <description>Microservice is a powerful software architecture to escalate innovations, and many businesses have been adopting microservice for a long time. However, the transition from monolith to microservice comes with costs. Fundamentally, microservices are distributed systems, often in large scales, which bring the burden of networking such as service discovery, retry, circuit breaker, as well as the observability such as metrics, logging, and distributed tracing. Istio helps microservices to offloads these</description>
    </item>
    <item>
      <title>如何将第三方服务中心注册集成到 Istio ？</title>
      <link>http://localhost:1313/post/2020-06-02-third-party-registry/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-06-02-third-party-registry/</guid>
      <description>作为云原生服务网格领域的热门开源项目，Istio 可以为微服务提供无侵入的流量管理、安全通信、服务可见性等服务治理能力。目前越来越多的微服务项</description>
    </item>
    <item>
      <title>一文带你彻底厘清 Isito 中的证书工作机制</title>
      <link>http://localhost:1313/post/2020-05-25-istio-certificate/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-05-25-istio-certificate/</guid>
      <description>在上一篇文章一文带你彻底厘清 Kubernetes 中的证书工作机制中，我们介绍了 Kubernetes 中证书的工作机制。在这篇文章中，我们继续探讨 Istio 是如何使用证书来实现网格中服务的</description>
    </item>
    <item>
      <title>一文带你彻底厘清 Kubernetes 中的证书工作机制</title>
      <link>http://localhost:1313/post/2020-05-19-k8s-certificate/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-05-19-k8s-certificate/</guid>
      <description>接触 Kubernetes 以来，我经常看到 Kubernetes 在不同的地方使用了证书（Certificate），在 Kubernetes 安装和组件启动参数中也需要配置大量证书相关的参数。但是 Kubernetes 的文档</description>
    </item>
    <item>
      <title>数字证书原理</title>
      <link>http://localhost:1313/post/2020-03-19-pki/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-03-19-pki/</guid>
      <description>非对称加密 在传统的加密算法中，通信的双方会采用一个共享秘钥来对数据进行加密和解密。消息发送方先采用秘钥对明文进行加密然后再进行传送，待接收方</description>
    </item>
    <item>
      <title>Linux network namespace， veth， birdge与路由</title>
      <link>http://localhost:1313/post/2020-03-12-linux-network-virtualization/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-03-12-linux-network-virtualization/</guid>
      <description>Network Namespace A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. (摘录自Lin</description>
    </item>
    <item>
      <title>Linux Tun/Tap 介绍</title>
      <link>http://localhost:1313/post/2020-02-24-linux-taptun/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-02-24-linux-taptun/</guid>
      <description>什么是Tun/Tap 在计算机网络中，TUN与TAP是操作系统内核中的虚拟网络设备。不同于普通靠硬件网路板卡实现的设备，这些虚拟的网络设备全部</description>
    </item>
    <item>
      <title>Kubernetes 知识图谱</title>
      <link>http://localhost:1313/post/2020-02-22-k8s-mindmap/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-02-22-k8s-mindmap/</guid>
      <description>Mind Map Kubernetes 基本理念 自动化部署，缩扩容和管理容器应用 预期状态管理(Desired State Management) Kubernetes API 对象（声明预期状态） Kubernetes Control Plane（确保集群当前状态匹配预</description>
    </item>
    <item>
      <title>Network Service Mesh: A Big Step Toward Cloud-Native NFV</title>
      <link>http://localhost:1313/post/2020-02-21-network-service-mesh-english/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-02-21-network-service-mesh-english/</guid>
      <description>When hearing about the term “Network Service Mesh” for the first time, you probably are as curious as I was: What exactly is it behind this fancy name? Does it have anything to do with Service Mesh/Istio? It turns out that Network Service Mesh is a sandbox project in the CNCF (Cloud Native Foundation), and it’s also a new hotspot in the cloud-native area. In this post, I’ll dive into the architecture and technical details of Network Service Mesh, and also explore the relationship between it and some other similar technologies you might get confused with, including Service Mesh, SDN, and NFV.</description>
    </item>
    <item>
      <title>NFV迈向云原生时代：Network Service Mesh项目介绍</title>
      <link>http://localhost:1313/post/2020-02-15-network-service-mesh/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-02-15-network-service-mesh/</guid>
      <description>前言 当第一次看到Network Service Mesh这一名词时，你很可能和我一样好奇它到底是什么？是否和Service Mesh有什么关系？Network</description>
    </item>
    <item>
      <title>Istio流量管理实现机制深度解析</title>
      <link>http://localhost:1313/post/2018-09-25-istio-traffic-management-impl-intro/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-09-25-istio-traffic-management-impl-intro/</guid>
      <description>前言 Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的</description>
    </item>
    <item>
      <title>VIP的实现原理</title>
      <link>http://localhost:1313/post/2019-11-27-vip/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-11-27-vip/</guid>
      <description>什么是VIP？ VIP即Virtual IP Address，是实现HA（高可用）系统的一种方案，高可用的目的是通过技术手段避免因为系统出现故障而导</description>
    </item>
    <item>
      <title>What Can Service Mesh Learn from SDN?</title>
      <link>http://localhost:1313/post/2019-11-23-what-can-service-mesh-learn-from-sdn-english/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-11-23-what-can-service-mesh-learn-from-sdn-english/</guid>
      <description>Service Mesh is yet another emerging fancy tech word in the field of microservices recently. If you have a telecommunication or networking background, you may have already noticed that Service Mesh and SDN (Software Defined Network) look similar. Both of them use a software layer to manage and control the network infrastructure, and they also share the same architecture, which consists of a control plane and a data plane. So</description>
    </item>
    <item>
      <title>如何降低Istio服务网格中Envoy的内存开销</title>
      <link>http://localhost:1313/post/2019-11-15-envoy-memory-optimize/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-11-15-envoy-memory-optimize/</guid>
      <description>Envoy的内存占用 在Istio服务网格中，每个Envoy占用的内存也许并不算多，但所有sidecar增加的内存累积起来则是一个不小的数字。</description>
    </item>
    <item>
      <title>Service Mesher Meetup 成都站：Service Mesh是下一代SDN吗？</title>
      <link>http://localhost:1313/post/2019-10-26-what-can-service-mesh-learn-from-sdn/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-10-26-what-can-service-mesh-learn-from-sdn/</guid>
      <description>如果具有通信或者网络行业的知识背景，那么你对SDN(Software Defined Network)一定不会陌生。你也许已经注意到，近来在微服务领域兴起的</description>
    </item>
    <item>
      <title>Istio Pilot代码深度解析</title>
      <link>http://localhost:1313/post/2019-10-21-pilot-discovery-code-analysis/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-10-21-pilot-discovery-code-analysis/</guid>
      <description>Istio Pilot 组件介绍 在Istio架构中，Pilot组件属于最核心的组件，负责了服务网格中的流量管理以及控制面和数据面之间的配置下发。Pilot内部的</description>
    </item>
    <item>
      <title>Enhance Istio Distributed Tracing with OpenTracing</title>
      <link>http://localhost:1313/post/2019-07-02-using-opentracing-with-istio-english/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-07-02-using-opentracing-with-istio-english/</guid>
      <description>In the previous post, we discussed how to use Opentracing to help Istio Service Mesh to propagate tracing context across process boundaries, and how to enrich Istio/Envoy generated traces with method-level spans to get more fine-grained insights to the services. For now, all that we have been talking is just about synchronous RPC (HTTP/REST), however, we can’t ignore the fact that asynchronous messaging is also widely</description>
    </item>
    <item>
      <title>Enhance Istio Distributed Tracing with OpenTracing</title>
      <link>http://localhost:1313/post/2019-06-22-using-opentracing-with-istio-english/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-06-22-using-opentracing-with-istio-english/</guid>
      <description>While evolving towards a microservices architecture, the biggest change is that the monolith application has been divided into multiple independent processes(or services), as a result, a method call between software modules now becomes a remote procedure call go through multiple services. A client request usually goes through a couple of or even a dozen of services in a complex microservices system, which makes it really hard to figure out w</description>
    </item>
    <item>
      <title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title>
      <link>http://localhost:1313/post/2019-07-02-using-opentracing-with-istio/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-07-02-using-opentracing-with-istio/</guid>
      <description>在上一篇文章中，我们通过一个网上商店的示例程序学习了如何使用Opentracing在Istio服务网格中传递分布式调用跟踪的上下文，以及如何</description>
    </item>
    <item>
      <title>开源，社区与朋友们</title>
      <link>http://localhost:1313/post/2019-06-25-kubecon-cncf-oss-2019/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-06-25-kubecon-cncf-oss-2019/</guid>
      <description>大会背景介绍 2019年6月24-26日，KubeCon + CloudNativeCon + Open Source Summit大会在上海世博中心举行。本次大会是由CNCF的LC3和Linux</description>
    </item>
    <item>
      <title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title>
      <link>http://localhost:1313/post/2019-06-22-using-opentracing-with-istio/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-06-22-using-opentracing-with-istio/</guid>
      <description>分布式调用跟踪和Opentracing规范 什么是分布式调用跟踪？ 相比传统的“巨石”应用，微服务的一个主要变化是将应用中的不同模块拆分为了独立</description>
    </item>
    <item>
      <title>Which One is the Right Choice for the Ingress Gateway of Your Service Mesh?</title>
      <link>http://localhost:1313/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-04-16-how-to-choose-ingress-for-service-mesh-english/</guid>
      <description>By default, in a Kubernetes cluster with the Istio service mesh enabled, services can only be accessed inside the cluster. However, some of the services may need to be exposed to external networks as well. Kubernetes and Istio provide a variety of means to get external traffic into your cluster including NodePort, LoadBalancer, Kubernetes Ingress and Istio Gateway. With all these options, which one should be the right choice for</description>
    </item>
    <item>
      <title>如何为服务网格选择入口网关？</title>
      <link>http://localhost:1313/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-03-29-how-to-choose-ingress-for-service-mesh/</guid>
      <description>在启用了Istio服务网格的Kubernetes集群中，缺省情况下只能在集群内部访问网格中的服务，要如何才能从外部网络访问这些服务呢？ Kub</description>
    </item>
    <item>
      <title>Istio 服务注册插件机制代码解析</title>
      <link>http://localhost:1313/post/2019-02-18-pilot-service-registry-code-analysis/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-02-18-pilot-service-registry-code-analysis/</guid>
      <description>Istio服务注册插件机制 在Istio架构中，Pilot组件负责维护网格中的标准服务模型，该标准服务模型独立于各种底层平台，Pilot通过适</description>
    </item>
    <item>
      <title>Git内部存储原理</title>
      <link>http://localhost:1313/post/2019-01-21-git/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-01-21-git/</guid>
      <description>Git是程序员工作中使用频率非常高的工具，要提高日常的工作效率，就需要熟练掌握Git的使用方法。相对于传统的版本控制系统而言，Git更为强大</description>
    </item>
    <item>
      <title>The obstacles to put Istio into production and how we solve them</title>
      <link>http://localhost:1313/post/2018-12-27-the-obstacles-to-put-istio-into-production/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-12-27-the-obstacles-to-put-istio-into-production/</guid>
      <description>What is service mesh? Service mesh is becoming yet another fancy name in the cloud-native world this year. What exactly it is? By definition, service mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud-native application. Besides, it also facilitates the governance of services. What is Istio? Istio</description>
    </item>
    <item>
      <title>Machine Learning Introduction</title>
      <link>http://localhost:1313/post/2018-12-24-machine-learningp-introduction/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-12-24-machine-learningp-introduction/</guid>
      <description>What is machine learning? Two definitions of machine learning are offered. Arthur Samuel version: A field of study that gives computers the ability to learn without being explicitly programmed. Tom Mitchell version: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E. Example: playing checkers. E</description>
    </item>
    <item>
      <title>拥抱NFV，Istio 1.1 将支持多网络平面</title>
      <link>http://localhost:1313/post/2018-12-19-multi-network-interfaces-for-istio/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-12-19-multi-network-interfaces-for-istio/</guid>
      <description>Istio 1.0版本只支持在单个网络，即Mesh中的服务只能连接在一个网络上。虽然在架构设计上是开放的，但从目前的代码来看，Istio的内部实现还是</description>
    </item>
    <item>
      <title>Istio实战系列-Envoy Proxy构建分析</title>
      <link>http://localhost:1313/post/2018-10-29-envoy-build/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-10-29-envoy-build/</guid>
      <description>Istio由控制面和数据面组成。其中Envoy是Istio在数据面缺省使用的转发代理，Istio利用Envoy的四层和七层代理功能对网格中微</description>
    </item>
    <item>
      <title>Istio微服务平台集成实践</title>
      <link>http://localhost:1313/post/2018-10-18-istio-paas-integration/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-10-18-istio-paas-integration/</guid>
      <description>前言 Istio发布1.0版本后，其服务发现和路由规则功能已基本具备production能力，我们也开始了Istio和公司内部微服务平台的集成</description>
    </item>
    <item>
      <title>Istio流量管理实现机制深度解析</title>
      <link>http://localhost:1313/post/2018-09-25-istio-traffic-management-impl-intro/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-09-25-istio-traffic-management-impl-intro/</guid>
      <description>前言 Istio作为一个service mesh开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的</description>
    </item>
    <item>
      <title>Secure ONAP Microservices with Istio Mutual TLS Authentication and RBAC</title>
      <link>http://localhost:1313/post/2018-08-15-manage-onap-with-istio-auth-enabled/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-08-15-manage-onap-with-istio-auth-enabled/</guid>
      <description>In the previous post Manage ONAP Microservices with Istio Service Mesh, we went through the steps of how to install Istio and integrate it with ONAP platform, it’s super simple and has nearly no impact to the existing projects. Now let’s enable Istio auth to secure the inter-service communication inside ONAP, it will need a little bit more efforts, but it’</description>
    </item>
    <item>
      <title>Manage ONAP Microservices with Istio Service Mesh</title>
      <link>http://localhost:1313/post/2018-08-01-manage-onap-with-istio/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-08-01-manage-onap-with-istio/</guid>
      <description>In the previous post How service mesh can help during the ONAP Microservice journey, we have discussed why the community wants ONAP to evolve towards Microservice architecture and how service mesh approach could help during the journey. Now it’s time to dip our toe in the water, let’s try out Istio with ONAP by following the below steps. Installation First, download installation scripts</description>
    </item>
    <item>
      <title>How service mesh can help during the ONAP Microservice journey</title>
      <link>http://localhost:1313/post/2018-06-22-onap-with-service-mesh/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-06-22-onap-with-service-mesh/</guid>
      <description>ONAP Beijing is available now! ONAP, as part of LF Networking, now accounts for more than 65% of global subscriber participation through carriers creating a harmonized, de-facto open source platform. While it&amp;rsquo;s so exciting to see that more operators are deploying ONAP in their commercial network, ONAP community realizes that there are still somewhere we can improve to smooth the deployment process. For example, instead of deploying ONAP as a</description>
    </item>
    <item>
      <title>Istio v1aplha3 routing API介绍(译文）</title>
      <link>http://localhost:1313/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid>
      <description>&lt;p&gt;到目前为止，Istio提供了一个简单的API来进行流量管理，该API包括了四种资源：RouteRule，DestinationPolicy，EgressRule和Ingress（直接使用了Kubernets的Ingress资源）。借助此API，用户可以轻松管理Istio服务网格中的流量。该API允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bitcoin Script</title>
      <link>http://localhost:1313/2018/06/03/cryptocurrency_week3_bitcoin_script/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/06/03/cryptocurrency_week3_bitcoin_script/</guid>
      <description>This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course. Bitcoin Script is using to transfer coins instead of just signature and public key address, which allows more flexibilities for Bitcoin transactions. A Standard Transaction Let&amp;rsquo;s say Alice wants to spend some coins she received from a previous transaction, this is how the procedure looks like. Alice receives some coins from a previous transaction. One of</description>
    </item>
    <item>
      <title>Istio 0.8 Release发布</title>
      <link>http://localhost:1313/2018/06/02/istio08/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/06/02/istio08/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Distributed Consensus</title>
      <link>http://localhost:1313/2018/05/26/cryptocurrency_week2_distributed_consenus/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/26/cryptocurrency_week2_distributed_consenus/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Incentives and Proof of Work</title>
      <link>http://localhost:1313/2018/05/26/cryptocurrency_week2_incentives_and_proof_of_work/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/26/cryptocurrency_week2_incentives_and_proof_of_work/</guid>
      <description>This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course. Incentive The mechanism to motivate nodes join the Bitcoin network and create blocks. Incentive 1: Block Reward Creator of block gets to include special coin-creation transaction in the block choose reciptient address of this transaction (Of course, it is the miner&amp;rsquo;s address) Explanation: Because the coin-creation transaction is just like other transaction in that block, it</description>
    </item>
    <item>
      <title>Everything about Setting Up My Ubuntu Desktop</title>
      <link>http://localhost:1313/2018/05/24/set_up_my_ubuntu_desktop/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/24/set_up_my_ubuntu_desktop/</guid>
      <description>Generate SSH Key Pair ssh-keygen -C &amp;#34;zhaohuabing@gmail.com&amp;#34; Shadowsocks Install shadowsokcs sudo apt-get install python3-pip sudo pip3 install shadowsocks Create config at config/shadowsocks.json, with the following content: { &amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;, &amp;#34;server_port&amp;#34;:443, &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;, &amp;#34;timeout&amp;#34;:300, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;, &amp;#34;fast_open&amp;#34;:false, &amp;#34;workers&amp;#34;:1 } Start a local socks proxy sudo sslocal -c config/shadowsocks.json -d start In case there is an openssl error, modify shadowsocks source file. sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py :%s/cleanup/reset/gc Convert shadowsocks socks proxy to http proxy</description>
    </item>
    <item>
      <title>微服务安全沉思录之三</title>
      <link>http://localhost:1313/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/external_system_auth/</guid>
      <description>外部系统访问控制 除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的</description>
    </item>
    <item>
      <title>微服务安全沉思录之二</title>
      <link>http://localhost:1313/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 id=&#34;服务间认证与鉴权&#34;&gt;服务间认证与鉴权&lt;/h2&gt;&#xA;&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;BR&gt;&#xA;例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;&#xA;&lt;li&gt;非用户触发的微服务之间的相互访问&lt;BR&gt;&#xA;例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务安全沉思录之一</title>
      <link>http://localhost:1313/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/22/user_authentication_authorization/</guid>
      <description>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在</description>
    </item>
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p&gt;&#xA;&lt;p&gt;使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;&#xA;&lt;p&gt;Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Algolia为Gitpage博客提供站内搜索</title>
      <link>http://localhost:1313/2018/05/21/algolia-integration-with-jekyll/</link>
      <pubDate>Mon, 21 May 2018 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/21/algolia-integration-with-jekyll/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;table-of-content&#34;&gt;Table of Content&lt;/h2&gt;&#xA;&lt;p&gt;{:.no_toc}&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Table of Content&#xA;{:toc}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;scrooge-coin-transaction&#34;&gt;Scrooge Coin Transaction&lt;/h2&gt;&#xA;&lt;p&gt;Scrooge Coin programming assignment is a little bit tricky, the video of this lesson hasn&amp;rsquo;t explained some implementation details. To help you understand the transaction data structure used in Scrooge Coin, I draw this diagram:&#xA;&#xA;  &lt;img src=&#34;http://localhost:1313/img//2018-5-20-cryptocurrency_week1_scroogecoin/scroogecoin.png&#34; alt=&#34;Scrooge Coin&#34;&gt;&#xA;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming Assignment: Scrooge Coin</title>
      <link>http://localhost:1313/2018/05/20/cryptocurrency_week1_scroogecoin/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/20/cryptocurrency_week1_scroogecoin/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Finally, I got to the most exciting part of week 1 lectures-the programming assignment!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Digital Signature and Public Key as Identities</title>
      <link>http://localhost:1313/2018/05/12/cryptocurrency_week1_digital_signature/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/12/cryptocurrency_week1_digital_signature/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Hash Pointers and Data Structures</title>
      <link>http://localhost:1313/post/2018-05-12-cryptocurrency_week1_hash_pointer_and_data_structures/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-05-12-cryptocurrency_week1_hash_pointer_and_data_structures/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;hash-pointer&#34;&gt;Hash Pointer&lt;/h2&gt;&#xA;&lt;p&gt;Hash Pointer is comprised of two parts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pointer to where some information is stored&lt;/li&gt;&#xA;&lt;li&gt;Cryptographic hash of that information &lt;br&gt;&#xA;The pointer can be used to get the information, the hash can be used to verify that information hasn&amp;rsquo;t been changed &lt;br&gt;&#xA;&#xA;  &lt;img src=&#34;http://localhost:1313/img//2018-05-12-cryptocurrency_week1_hash_pointer_and_data_structures/hashpointet.png&#34; alt=&#34;hashpointer&#34;&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Cryptographic Hash Function</title>
      <link>http://localhost:1313/2018/05/07/cryptocurrency_week1_cryptographic_hash_function/</link>
      <pubDate>Wed, 09 May 2018 22:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/07/cryptocurrency_week1_cryptographic_hash_function/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;hash-function&#34;&gt;Hash Function&lt;/h2&gt;&#xA;&lt;p&gt;Hash function is a mathematical function:&lt;em&gt;H(X)=Y&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;H:  A hash function which takes an input value and calculates an output value&lt;/li&gt;&#xA;&lt;li&gt;X: Input of the hash function, it could be any data of any length&lt;/li&gt;&#xA;&lt;li&gt;Y: Output of the hash function: a fix-size bit(, it can be 256, 384, 516 &amp;hellip;, Bitcoin uses 256)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Introduction to crypto and cryptocurrencies</title>
      <link>http://localhost:1313/2018/05/06/cryptocurrency_week1/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/06/cryptocurrency_week1/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;how-did-i-get-into-this&#34;&gt;How did I get into this?&lt;/h2&gt;&#xA;&lt;p&gt;I have noticed the buzzwords “Bitcoin” and “Blockchain” for a while. There are lots of articles, news, and talks around them. It seems that many people believe that cryptocurrency is the future of online payment, some even claim that blockchain would become the fundamental technology of the next generation of the Internet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm介绍</title>
      <link>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel</description>
    </item>
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway 在前一篇关于Service Mesh的文章中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章</description>
    </item>
    <item>
      <title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title>
      <link>http://localhost:1313/2018/03/29/what-is-service-mesh-and-istio/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/03/29/what-is-service-mesh-and-istio/</guid>
      <description>&lt;h2 id=&#34;微服务架构的演进&#34;&gt;微服务架构的演进&lt;/h2&gt;&#xA;&lt;p&gt;作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何配置docker使用HTTP代理</title>
      <link>http://localhost:1313/2018/03/13/use-docker-behind-http-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/03/13/use-docker-behind-http-proxy/</guid>
      <description>&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;&#xA;&lt;h3 id=&#34;设置docker使用http-proxy&#34;&gt;设置docker使用http proxy&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /etc/default/docker&#xA;&#xA;export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Vim Tips</title>
      <link>http://localhost:1313/2018/02/09/vim-tips/</link>
      <pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/02/09/vim-tips/</guid>
      <description>&lt;h2 id=&#34;vim-graphical-cheat-sheet&#34;&gt;vim graphical cheat sheet&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;http://localhost:1313/img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg&#34; alt=&#34;&#34;&gt;&#xA;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Tips</title>
      <link>http://localhost:1313/post/2018-02-09-docker-without-sudo/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-02-09-docker-without-sudo/</guid>
      <description>Allow none-root users sudo groupadd docker sudo gpasswd -a $USER docker newgrp docker Solve &amp;ldquo;no space left on device&amp;rdquo; ubuntu sudo vi /etc/docker/daemon.json { &amp;#34;storage-driver&amp;#34;: &amp;#34;devicemapper&amp;#34;, &amp;#34;storage-opts&amp;#34;: [ &amp;#34;dm.basesize=40G&amp;#34; ] } Mac Docker -&amp;gt; settings -&amp;gt; Resources -&amp;gt; Disk Image Size</description>
    </item>
    <item>
      <title>如何构建安全的微服务应用？</title>
      <link>http://localhost:1313/2018/02/03/authentication-and-authorization-of-microservice/</link>
      <pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/02/03/authentication-and-authorization-of-microservice/</guid>
      <description>前言 微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统</description>
    </item>
    <item>
      <title>Nginx开源Service Mesh组件Nginmesh安装指南</title>
      <link>http://localhost:1313/2018/01/02/nginmesh-install/</link>
      <pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/02/nginmesh-install/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何从外部访问Kubernetes集群中的应用？</title>
      <link>http://localhost:1313/2017/11/28/access-application-from-outside/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/28/access-application-from-outside/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用脚本和定时任务自动设置windows HTTP 代理服务器</title>
      <link>http://localhost:1313/2017/11/23/windows-proxy-scripts/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/23/windows-proxy-scripts/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;&#xA;&lt;p&gt;我非常愿意在日程使用的工作工具上进行投资，好的工具可以提升效率，因为工具的问题导致思维中断非常让人沮丧。我在办公室使用一台ThinkPad笔记本，笔记本是公司发的，我自己花钱升级了SSD，内存，安装的是Win10，秒级启动，安装vagrant和virtualbox后，用Linux虚机进行开发也很顺手。但一个小代理服务器设置的小问题却影响了我使用笔记本处理事务的体验。&lt;/p&gt;</description>
    </item>
    <item>
      <title>采用Istio实现灰度发布(金丝雀发布)</title>
      <link>http://localhost:1313/2017/11/08/istio-canary-release/</link>
      <pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/08/istio-canary-release/</guid>
      <description>灰度发布（又名金丝雀发布）介绍 当应用上线以后，运维面临的一大挑战是如何能够在不影响已上线业务的情况下进行升级。做过产品的同学都清楚，不管在发</description>
    </item>
    <item>
      <title>使用Istio实现应用流量转移</title>
      <link>http://localhost:1313/2017/11/07/istio-traffic-shifting/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/07/istio-traffic-shifting/</guid>
      <description>&lt;p&gt;关于Istio的更多内容请参考&lt;a href=&#34;http://istio.doczh.cn/&#34;&gt;istio中文文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;原文参见&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/traffic-shifting.html&#34;&gt;Traffic Shifting&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio及Bookinfo示例程序安装试用笔记</title>
      <link>http://localhost:1313/2017/11/04/istio-install_and_example/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/04/istio-install_and_example/</guid>
      <description>&lt;h2 id=&#34;服务网格简介&#34;&gt;服务网格简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;（Service Mesh）是为解决微服务的通信和治理而出现的一种&lt;strong&gt;架构模式&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
